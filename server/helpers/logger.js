import gutil from 'gulp-util';
import util from 'util';

import config from '../config';

function errorMessage(message, err, type) {
  // if message was generated by throw new error,
  // it will have 'error' in the message, so remove it
  log(message.replace('Error:', '') + ' Error : ' + err, [type, 'error']);
}

function log(message, type, color) {
  if (config.logger.silent) {
    return;
  }
  const colorOverride = color !== undefined;

  color = color || 'blue';
  type  = type || [];

  if (!colorOverride) {
    if (type.indexOf('userAction') !== -1) {
      color = 'cyan';
    }
    if (type.indexOf('init') !== -1) {
      color = 'olive';
    }
    if (type.indexOf('gulp') !== -1) {
      color = 'green';
    }
    if (type.indexOf('access') !== -1) {
      color   = 'gray';
      message = message.replace('Site', '\n\t   Site  ');
    }
    if (type.indexOf('error') !== -1) {
      color   = 'red';
      message = message.replace('Error', '\n\t   Error');
    }
  }

  if (type.indexOf('inspect') === -1) {
    gutil.log(gutil.colors[color](message));
  } else {
    console.log(util.inspect(message, false, 2))
  }
}

function action(message, type, color) {
  type = type || [];
  type.push('userAction');
  log(message, type, color);
}

function init(message, color) {
  message = 'Init: ' + message;
  log(message, ['Init'], color);
}

function access(user, message, err) {
  user = user.name || 'Guest';
  message = 'Access: ' + user + ' Site: ' + message;
  if (!err) {
    log(message, ['access']);
  } else {
    errorMessage(message, err, 'access');
  }
}

function logApi(user, message, err) {
  user = user.name || 'Guest';
  message = 'Access: ' + user + ' Site: ' + message;
  if (!err) {
    log(message, ['userAction']);
  } else {
    errorMessage(message, err, 'userAction');
  }
}

function inspect(obj) {
  log(obj, ['inspect']);
}

export {
  access,
  action,
  inspect,
  init,
  log,
  logApi
};
